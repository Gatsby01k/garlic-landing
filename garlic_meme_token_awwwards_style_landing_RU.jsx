"use client";

import React, { useEffect, useRef, useState, useContext, createContext } from "react";
import { motion, useMotionValue, useSpring, AnimatePresence } from "framer-motion";
import {
  Twitter, Send, Rocket, Shield, Coins, Sparkles,
  ChevronRight, ExternalLink, BadgeCheck, Lock, Link as LinkIcon, Quote, Layers, GaugeCircle
} from "lucide-react";
import FloatingCloves from "./components/FloatingCloves";

/* ======================= I18N: —Å–ª–æ–≤–∞—Ä—å ======================= */
const LANGS = ["ru", "en", "hi", "id"];
const FALLBACK = "ru";

const DICT = {
  en: {
    nav: { approach: "Approach", policy: "Policy", tokenomics: "Tokenomics", roadmap: "Roadmap", buy: "Buy" },
    trustStrip: ["FAIR LAUNCH", "ZERO TAX", "LP LOCK", "RENOUNCED"],
    hero: {
      tags: ["discipline", "liquidity-first", "community"],
      titleTop: "GARLIC",
      titleBottom: "A meme with protocol discipline.",
      paragraph:
        "Rules are set in code: fair launch, 0% on trades, liquidity locked and ownership renounced. We remove noise so attention stays on idea and liquidity ‚Äî the market does the rest.",
      buy: "Enter position",
      policy: "Protocol policy",
      badge: "rule-based ‚Ä¢ meme-driven",
      marquee: [
        "One start for everyone",
        "0% taxes",
        "Liquidity is locked",
        "Ownership renounced",
        "Culture drives adoption"
      ],
      keyHint: "‚Äî tokenomics"
    },
    approach: {
      kicker: "Approach",
      title: "Professional structure, meme presentation",
      caption: "We make the meme readable to capital: simple rules, low friction and a cultural symbol.",
      c1t: "Fair launch, no bending",
      c1p: "No private allocations. One entry horizon ‚Äî one market temperature.",
      c2t: "Zero-tax, zero-friction",
      c2p: "No trade tax ‚Äî focus on liquidity and spread, not on toggles.",
      c3t: "Culture ‚Ä∫ marketing",
      c3p: "A strong symbol üßÑ, irony and order ‚Äî community generates the content."
    },
    policy: {
      kicker: "Policy",
      title: "What is fixed by rules",
      caption: "We formalize expectations upfront. Clear settings ‚Üí predictable token behavior.",
      c1t: "Trade tax ‚Äî 0%",
      c1p: "Trading without tax. Friction is minimal; liquidity has priority.",
      c2t: "Liquidity is locked",
      c2p: "The pool is fixed during launch ‚Äî design against rushed manipulation.",
      c3t: "Ownership ‚Äî renounced",
      c3p: "No admin switches ‚Äî code takes responsibility, not a person.",
      s1: "Contract",
      s1v: "Address is published on launch day",
      s2: "Architecture",
      s2v: "OpenZeppelin stack and standard patterns",
      s2v2: "No experimental upgrades or surprises.",
      s3: "Policy",
      pills: ["Fair Launch", "No Presale", "Anti-Rug policy"]
    },
    partners: { header: "As seen on / Partners" },
    signals: {
      kicker: "Signals",
      title: "Calm tone, serious intent",
      caption: "We like numbers and irony. Both coexist when rules are simple.",
      q1: "‚ÄúStructure like a protocol, not a prank. Watching liquidity.‚Äù",
      q2: "‚ÄúGarlic vibe explained in the language of capital ‚Äî rare.‚Äù",
      q3: "‚ÄúZero-tax and renounced ‚Äî a steady configuration. Market does the rest.‚Äù"
    },
    tokenomics: {
      kicker: "Tokenomics",
      title: "Transparent and predictable",
      caption: "Fewer parameters ‚Äî less uncertainty. Configuration prioritizes liquidity.",
      supply: "Total supply",
      taxes: "Taxes",
      taxesVal: "0 %",
      liquidity: "Liquidity",
      liquidityVal: "Locked",
      dist: "Distribution",
      distList: ["60% ‚Äî Liquidity", "20% ‚Äî Community / airdrops / quests", "10% ‚Äî Partnerships", "10% ‚Äî DAO reserve (multisig)"],
      arch: "Architecture",
      archP: "Standard contracts, ownership renounced after launch, non-upgradeable.",
      pills: ["OpenZeppelin", "Non-upgradeable", "DAO reserve"]
    },
    roadmap: {
      kicker: "Roadmap",
      title: "From clean launch to culture",
      caption: "Flexible, focused on value for holders and creators.",
      phase: "Phase",
      p1: ["Website, socials, DEX launch", "LP lock, renounced", "Meme narrative & visual language"],
      p2: ["NFT ‚ÄúCloves‚Äù for active members", "Artist collaborations", "Community activations & raffles"],
      p3: ["Garlic DAO (creator grants)", "Mini-games / integrations", "CEX listings (if possible)"]
    },
    buy: {
      kicker: "How to buy",
      title: "Three steps, no fuss",
      caption: "Wallet ‚Äî base coin ‚Äî swap. Then culture.",
      s1: "Wallet", s1p: "MetaMask / Rabby / OKX. Pick a network (ETH/BSC).",
      s2: "Base & gas", s2p: "Fund ETH/BNB for swap and network fees.",
      s3: "Swap to $GARLIC", s3p: "Uniswap / PancakeSwap. Address goes live on launch day.",
      cta: "Join the community",
      note: "* Not financial advice. Crypto is volatile."
    },
    community: {
      kicker: "Community",
      title: "Rational meme: a smile with discipline",
      caption: "Announcements, discussions, raffles, builds ‚Äî join and bring your flavor."
    },
    footer: {
      disclaimer: "Meme project. No profit is guaranteed.",
      hint: "Press",
      hintAfter: "‚Äî tokenomics"
    }
  },
  ru: {
  nav: {
    approach: "–õ–µ–≥–µ–Ω–¥–∞",
    policy: "–ü–æ–ª–∏—Ç–∏–∫–∞",
    tokenomics: "–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞",
    roadmap: "–ö–∞—Ä—Ç–∞",
    buy: "–ö—É–ø–∏—Ç—å"
  },
  trustStrip: [
    "–ß–ï–°–¢–ù–´–ô –°–¢–ê–†–¢",
    "0% –ù–ê–õ–û–ì",
    "LP –ó–ê–ö–†–´–¢",
    "–ü–†–ê–í–ê –û–¢–ö–ê–ó–ê–ù–´"
  ],
  hero: {
    tags: [
      "–º–µ–º",
      "–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å",
      "–∫–æ–º—å—é–Ω–∏—Ç–∏"
    ],
    titleTop: "GARLIC",
    titleBottom: "–ú–µ–º‚Äë–º–æ–Ω–µ—Ç–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º–ø–∏—Ä—ã –±–µ–≥—É—Ç.",
    paragraph: "–ó–∞–ø–∞—Ö üßÑ –≤—ã–≥–æ–Ω—è–µ—Ç –§–£–î, —Å–∫–∞–º –∏ –Ω–æ—á–Ω–æ–π –¥—Ä–∏—Ñ—Ç –º–∞—Ä–∫–µ—Ç‚Äë–≤–∞–º–ø–∏—Ä–æ–≤. –ß–µ—Å—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫, 0% –Ω–∞ —Å–¥–µ–ª–∫–∏, LP –ø–æ–¥ –∑–∞–º–∫–æ–º –∏ –æ—Ç–∫–∞–∑ –æ—Ç –ø—Ä–∞–≤. –ú—ã —à—É—Ç–∏–º, –Ω–æ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –∂—ë—Å—Ç–∫–∏–µ: –≤–Ω–∏–º–∞–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ –∏–¥–µ–µ –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ ‚Äî —Ä—ã–Ω–æ–∫ –¥–µ–ª–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–µ.",
    buy: "–ö—É–ø–∏—Ç—å $GARLIC",
    policy: "–ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞",
    badge: "–º–µ–º‚Äë–¥—Ä–∞–π–≤ ‚Ä¢ –ø—Ä–∞–≤–∏–ª–∞ –≤ –∫–æ–¥–µ",
    marquee: [
      "–û–¥–∏–Ω —Å—Ç–∞—Ä—Ç –¥–ª—è –≤—Å–µ—Ö",
      "0% –Ω–∞–ª–æ–≥–∏",
      "–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ–¥ –∑–∞–º–∫–æ–º",
      "–ü—Ä–∞–≤–∞ ‚Äî –æ—Ç–∫–∞–∑",
      "–ö—É–ª—å—Ç—É—Ä–∞ –¥–≤–∏–≥–∞–µ—Ç —Å–ø—Ä–æ—Å"
    ],
    keyHint: "‚Äî —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∞"
  },
  approach: {
    kicker: "–õ–µ–≥–µ–Ω–¥–∞",
    title: "–ì–ê–†–õ–ò–ö –ø—Ä–æ—Ç–∏–≤ –≤–∞–º–ø–∏—Ä–æ–≤ —Ä—ã–Ω–∫–∞",
    caption: "–î—É–º–∞–π –æ –Ω–∞—Å –∫–∞–∫ –æ —á–µ—Å–Ω–æ—á–Ω–æ–π –≥–≤–æ–∑–¥–∏–∫–µ –≤ –∫–æ—à–µ–ª—å–∫–µ: –æ—Ç–ø—É–≥–∏–≤–∞–µ—Ç –≤–∞–º–ø–∏—Ä–æ–≤ (—Å–∫–∞–º–µ—Ä–æ–≤ –∏ –§–£–î–µ—Ä–æ–≤), —Ä–∞–¥—É–µ—Ç –≤–∫—É—Å–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç–æ—Ä—ã –∫—É–ª—å—Ç—É—Ä—ã.",
    c1t: "–ß–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç ‚Äî –±–µ–∑ —É–∫—É—Å–æ–≤",
    c1p: "–ë–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∞–ª–ª–æ–∫–∞—Ü–∏–π. –û–¥–∏–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç –≤—Ö–æ–¥–∞ ‚Äî –æ–¥–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞.",
    c2t: "0% –Ω–∞–ª–æ–≥ ‚Äî –º–µ–Ω—å—à–µ —Ç—Ä–µ–Ω–∏—è",
    c2p: "–ù–∏–∫–∞–∫–∏—Ö –Ω–∞–ª–æ–≥–æ–≤ –Ω–∞ —Å–¥–µ–ª–∫–∏ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Å–ø—Ä–µ–¥–∞, –∞ –Ω–µ —Ç—É–º–±–ª–µ—Ä–æ–≤.",
    c3t: "–ú–∞—Å–∫–æ—Ç ‚Ä∫ –º–∏—Ñ–æ–ª–æ–≥–∏—è ‚Ä∫ –∫–æ–Ω—Ç–µ–Ω—Ç",
    c3p: "–°–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª üßÑ, —Å–∞–º–æ–∏—Ä–æ–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫. –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–æ–∂–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º."
  },
  policy: {
    kicker: "–ü–æ–ª–∏—Ç–∏–∫–∞",
    title: "–ß—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–¥–æ–º",
    caption: "–û–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ. –ß—ë—Ç–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞.",
    c1t: "–ù–∞–ª–æ–≥ –Ω–∞ —Å–¥–µ–ª–∫–∏ ‚Äî 0%",
    c1p: "–¢–æ—Ä–≥–æ–≤–ª—è –±–µ–∑ –Ω–∞–ª–æ–≥–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–Ω–∏–µ; –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å.",
    c2t: "–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ‚Äî –ø–æ–¥ –∑–∞–º–∫–æ–º",
    c2p: "–ü—É–ª —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∑–∞–ø—É—Å–∫–µ ‚Äî –¥–∏–∑–∞–π–Ω –ø—Ä–æ—Ç–∏–≤ –ø–æ—Å–ø–µ—à–Ω—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π.",
    c3t: "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–∞–≤",
    c3p: "–ù–∏–∫–∞–∫–∏—Ö –∞–¥–º–∏–Ω‚Äë–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –∫–æ–¥–µ, –∞ –Ω–µ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–µ.",
    s1: "–ö–æ–Ω—Ç—Ä–∞–∫—Ç",
    s1v: "–ê–¥—Ä–µ—Å –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –¥–µ–Ω—å –∑–∞–ø—É—Å–∫–∞",
    s2: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
    s2v: "–°—Ç–µ–∫ OpenZeppelin –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
    s2v2: "–ù–∏–∫–∞–∫–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∞–ø–≥—Ä–µ–π–¥–æ–≤ –∏ —Å—é—Ä–ø—Ä–∏–∑–æ–≤.",
    s3: "–ü–æ–ª–∏—Ç–∏–∫–∞",
    pills: [
      "Fair Launch",
      "No Presale",
      "Anti‚ÄëRug"
    ]
  },
  signals: {
    kicker: "–°–∏–≥–Ω–∞–ª—ã",
    title: "–°–ø–æ–∫–æ–π–Ω—ã–π —Ç–æ–Ω, –æ—Å—Ç—Ä—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è",
    caption: "–ú—ã –ª—é–±–∏–º —Ü–∏—Ñ—Ä—ã –∏ –∏—Ä–æ–Ω–∏—é. –û–Ω–∏ —É–∂–∏–≤–∞—é—Ç—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã.",
    q1: "¬´–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ —É –ø—Ä–æ—Ç–æ–∫–æ–ª–∞, –∞ –Ω–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –°–º–æ—Ç—Ä–∏–º –Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å.¬ª",
    q2: "¬´–ß–µ—Å–Ω–æ—á–Ω—ã–π –≤–∞–π–±, –æ–±—ä—è—Å–Ω—ë–Ω–Ω—ã–π –Ω–∞ —è–∑—ã–∫–µ –∫–∞–ø–∏—Ç–∞–ª–∞ ‚Äî —Ä–µ–¥–∫–æ—Å—Ç—å.¬ª",
    q3: "¬´–ù–æ–ª—å –Ω–∞–ª–æ–≥–æ–≤ –∏ –æ—Ç–∫–∞–∑ –æ—Ç –ø—Ä–∞–≤ ‚Äî —É—Å—Ç–æ–π—á–∏–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. –†—ã–Ω–æ–∫ —Å–¥–µ–ª–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–µ.¬ª"
  },
  tokenomics: {
    kicker: "–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞",
    title: "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ",
    caption: "–ú–µ–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äî –º–µ–Ω—å—à–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞–≤–∏—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ.",
    supply: "–û–±—â–∏–π –≤—ã–ø—É—Å–∫",
    taxes: "–ù–∞–ª–æ–≥–∏",
    taxesVal: "0 %",
    liquidity: "–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å",
    liquidityVal: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞",
    dist: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
    distList: [
      "60% ‚Äî –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å",
      "20% ‚Äî –ö–æ–º—å—é–Ω–∏—Ç–∏ / airdrops / quests",
      "10% ‚Äî –ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞",
      "10% ‚Äî –†–µ–∑–µ—Ä–≤ DAO (multisig)"
    ],
    arch: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
    archP: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –ø—Ä–∞–≤–∞ –±—É–¥—É—Ç –æ—Ç–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞, –±–µ–∑ –∞–ø–≥—Ä–µ–π–¥–æ–≤.",
    pills: [
      "OpenZeppelin",
      "–ë–µ–∑ –∞–ø–≥—Ä–µ–π–¥–æ–≤",
      "–†–µ–∑–µ—Ä–≤ DAO"
    ]
  },
  roadmap: {
    kicker: "–ö–∞—Ä—Ç–∞",
    title: "–û—Ç —á–∏—Å—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ",
    caption: "–ì–∏–±–∫–æ, —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ö–æ–ª–¥–µ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π.",
    phase: "–≠—Ç–∞–ø",
    p1: [
      "–°–∞–π—Ç, —Å–æ—Ü—Å–µ—Ç–∏, –∑–∞–ø—É—Å–∫ –Ω–∞ DEX",
      "LP‚Äë–∑–∞–º–æ–∫, –æ—Ç–∫–∞–∑ –æ—Ç –ø—Ä–∞–≤",
      "–ú–∏—Ñ–æ–ª–æ–≥–∏—è –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —è–∑—ã–∫"
    ],
    p2: [
      "NFT ¬´Cloves¬ª –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
      "–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ —Å —Ö—É–¥–æ–∂–Ω–∏–∫–∞–º–∏",
      "–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"
    ],
    p3: [
      "Garlic DAO (–≥—Ä–∞–Ω—Ç—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è–º)",
      "–ú–∏–Ω–∏‚Äë–∏–≥—Ä—ã / –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
      "–õ–∏—Å—Ç–∏–Ω–≥–∏ CEX (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è)"
    ]
  },
  buy: {
    kicker: "–ö–∞–∫ –∫—É–ø–∏—Ç—å",
    title: "–¢—Ä–∏ —à–∞–≥–∞ ‚Äî –±–µ–∑ –ø–æ–≤–∞—Ä–∞",
    caption: "–ö–æ—à–µ–ª—ë–∫ ‚Äî –±–∞–∑–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞ ‚Äî —Å–≤–æ–ø. –î–∞–ª—å—à–µ ‚Äî –∫—É–ª—å—Ç—É—Ä–∞.",
    s1: "–ö–æ—à–µ–ª—ë–∫",
    s1p: "MetaMask / Rabby / OKX. –í—ã–±–µ—Ä–∏ —Å–µ—Ç—å (ETH/BSC).",
    s2: "–ë–∞–∑–∞ –∏ –≥–∞–∑",
    s2p: "–ü–æ–ø–æ–ª–Ω–∏ ETH/BNB –¥–ª—è —Å–≤–æ–ø–∞ –∏ –∫–æ–º–∏—Å—Å–∏–π —Å–µ—Ç–∏.",
    s3: "–°–≤–æ–ø –≤ $GARLIC",
    s3p: "Uniswap / PancakeSwap. –ê–¥—Ä–µ—Å –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –¥–µ–Ω—å –∑–∞–ø—É—Å–∫–∞.",
    cta: "–í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ",
    note: "* –ù–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç. –ö—Ä–∏–ø—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–∞."
  },
  community: {
    kicker: "–°–æ–æ–±—â–µ—Å—Ç–≤–æ",
    title: "–ú–µ–º —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º: –ø–∞—Ö–Ω–µ–º, –Ω–æ –∫—Ä–∞—Å–∏–≤–æ",
    caption: "–ê–Ω–æ–Ω—Å—ã, –æ–±—Å—É–∂–¥–µ–Ω–∏—è, —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –±–∏–ª–¥—ã ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ –ø—Ä–∏–≤–Ω–æ—Å–∏ —Å–≤–æ–π –∞—Ä–æ–º–∞—Ç."
  },
  partners: {
    header: "–ö–∞–∫ –Ω–∞—Å –≤–∏–¥—è—Ç / –ü–∞—Ä—Ç–Ω—ë—Ä—ã"
  },
  footer: {
    disclaimer: "–ú–µ–º‚Äë–ø—Ä–æ–µ–∫—Ç. –î–æ—Ö–æ–¥ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω.",
    hint: "–ù–∞–∂–º–∏",
    hintAfter: "‚Äî —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∞"
  }
},
  hi: {
    nav: { approach: "‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§ï‡•ã‡§£", policy: "‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Å", tokenomics: "‡§ü‡•ã‡§ï‡§®‡•â‡§Æ‡§ø‡§ï‡•ç‡§∏", roadmap: "‡§∞‡•ã‡§°‡§Æ‡•à‡§™", buy: "‡§ñ‡§∞‡•Ä‡§¶‡•á‡§Ç" },
    trustStrip: ["‡§´‡•á‡§Ø‡§∞ ‡§≤‡•â‡§®‡•ç‡§ö", "‡§∂‡•Ç‡§®‡•ç‡§Ø ‡§ü‡•à‡§ï‡•ç‡§∏", "‡§è‡§≤‡§™‡•Ä ‡§≤‡•â‡§ï", "‡§ì‡§®‡§∞‡§∂‡§ø‡§™ ‡§∞‡•Ä‡§®‡§æ‡§â‡§Ç‡§∏‡•ç‡§°"],
    hero: {
      tags: ["‡§Ö‡§®‡•Å‡§∂‡§æ‡§∏‡§®", "‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä-‡§´‡§∞‡•ç‡§∏‡•ç‡§ü", "‡§ï‡§Æ‡•ç‡§Ø‡•Å‡§®‡§ø‡§ü‡•Ä"],
      titleTop: "GARLIC",
      titleBottom: "‡§Æ‡•Ä‡§Æ, ‡§™‡§∞ ‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ï‡•â‡§≤ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∂‡§æ‡§∏‡§®‡•§",
      paragraph:
        "‡§®‡§ø‡§Ø‡§Æ ‡§ï‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§§‡§Ø ‡§π‡•à‡§Ç: ‡§´‡•á‡§Ø‡§∞ ‡§≤‡•â‡§®‡•ç‡§ö, ‡§ü‡•ç‡§∞‡•á‡§° ‡§™‡§∞ 0%, ‡§≤‡•â‡§ï‡•ç‡§° ‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä ‡§î‡§∞ ‡§∞‡•Ä‡§®‡§æ‡§â‡§Ç‡§∏‡•ç‡§° ‡§ì‡§®‡§∞‡§∂‡§ø‡§™‡•§ ‡§∂‡•ã‡§∞ ‡§ï‡§Æ ‚Äî ‡§´‡•ã‡§ï‡§∏ ‡§Ü‡§á‡§°‡§ø‡§Ø‡§æ ‡§î‡§∞ ‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä ‡§™‡§∞; ‡§¨‡§æ‡§ï‡•Ä ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
      buy: "‡§™‡•ã‡§ú‡§º‡§ø‡§∂‡§® ‡§≤‡•á‡§Ç",
      policy: "‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ï‡•â‡§≤ ‡§™‡•â‡§≤‡§ø‡§∏‡•Ä",
      badge: "‡§∞‡•Ç‡§≤-‡§¨‡•á‡§∏‡•ç‡§° ‚Ä¢ ‡§Æ‡•Ä‡§Æ-‡§°‡•ç‡§∞‡§ø‡§µ‡§®",
      marquee: [
        "‡§∏‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§π‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§",
        "0% ‡§ü‡•à‡§ï‡•ç‡§∏",
        "‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä ‡§≤‡•â‡§ï",
        "‡§ì‡§®‡§∞‡§∂‡§ø‡§™ ‡§∞‡•Ä‡§®‡§æ‡§â‡§Ç‡§∏‡•ç‡§°",
        "‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø ‡§∏‡•á ‡§Ö‡§™‡§®‡§æ‡§™‡§®"
      ],
      keyHint: "‚Äî ‡§ü‡•ã‡§ï‡§®‡•â‡§Æ‡§ø‡§ï‡•ç‡§∏"
    },
    approach: {
      kicker: "‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§ï‡•ã‡§£",
      title: "‡§™‡•ç‡§∞‡•ã‡§´‡•á‡§∂‡§®‡§≤ ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞, ‡§Æ‡•Ä‡§Æ-‡§™‡•ç‡§∞‡•á‡§ú‡§º‡•á‡§Ç‡§ü‡•á‡§∂‡§®",
      caption: "‡§π‡§Æ ‡§Æ‡•Ä‡§Æ ‡§ï‡•ã ‡§™‡•Ç‡§Å‡§ú‡•Ä ‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§™‡§¢‡§º‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç: ‡§∏‡§∞‡§≤ ‡§®‡§ø‡§Ø‡§Æ, ‡§ï‡§Æ ‡§ò‡§∞‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•§",
      c1t: "‡§´‡•á‡§Ø‡§∞ ‡§≤‡•â‡§®‡•ç‡§ö, ‡§¨‡§ø‡§®‡§æ ‡§Æ‡•ã‡§°‡§º-‡§§‡•ã‡§°‡§º",
      c1p: "‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§Ö‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§è‡§ï ‡§π‡•Ä ‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§ï‡•ç‡§∑‡§ø‡§§‡§ø‡§ú ‚Äî ‡§è‡§ï ‡§π‡•Ä ‡§¨‡§æ‡§ú‡§º‡§æ‡§∞ ‡§§‡§æ‡§™‡§Æ‡§æ‡§®‡•§",
      c2t: "‡§ú‡§º‡•Ä‡§∞‡•ã-‡§ü‡•à‡§ï‡•ç‡§∏, ‡§ú‡§º‡•Ä‡§∞‡•ã-‡§´‡•ç‡§∞‡§ø‡§ï‡•ç‡§∂‡§®",
      c2p: "‡§ü‡•ç‡§∞‡•á‡§° ‡§ü‡•à‡§ï‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‚Äî ‡§´‡•ã‡§ï‡§∏ ‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä ‡§î‡§∞ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á‡§° ‡§™‡§∞, ‡§ü‡•â‡§ó‡§≤‡•ç‡§∏ ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç‡•§",
      c3t: "‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø ‚Ä∫ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó",
      c3p: "‡§Æ‡§ú‡§º‡§¨‡•Ç‡§§ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï üßÑ, ‡§π‡§≤‡•ç‡§ï‡•Ä ‡§µ‡§ø‡§°‡§Ç‡§¨‡§®‡§æ ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§∂‡§æ‡§∏‡§® ‚Äî ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡§Æ‡•ç‡§Ø‡•Å‡§®‡§ø‡§ü‡•Ä ‡§∏‡•á ‡§Ü‡§§‡§æ ‡§π‡•à‡•§"
    },
    policy: {
      kicker: "‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Å",
      title: "‡§ú‡•ã ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§∏‡•á ‡§§‡§Ø ‡§π‡•à",
      caption: "‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶‡•á‡§Ç ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§î‡§™‡§ö‡§æ‡§∞‡§ø‡§ï ‚Äî ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‚Üí ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡•á‡§Ø ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞‡•§",
      c1t: "‡§ü‡•ç‡§∞‡•á‡§° ‡§ü‡•à‡§ï‡•ç‡§∏ ‚Äî 0%",
      c1p: "‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§¨‡§ø‡§®‡§æ ‡§ü‡•à‡§ï‡•ç‡§∏‡•§ ‡§ò‡§∞‡•ç‡§∑‡§£ ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ; ‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡•§",
      c2t: "‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä ‡§≤‡•â‡§ï",
      c2p: "‡§≤‡•â‡§®‡•ç‡§ö ‡§´‡•á‡§ú‡§º ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§≤ ‡§´‡§ø‡§ï‡•ç‡§∏ ‚Äî ‡§ú‡§≤‡•ç‡§¶‡§¨‡§æ‡§ú‡§º‡•Ä ‡§ï‡•Ä ‡§π‡•á‡§∞‡§æ‡§´‡•á‡§∞‡•Ä ‡§ï‡•á ‡§µ‡§ø‡§∞‡•Å‡§¶‡•ç‡§ß ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®‡•§",
      c3t: "‡§ì‡§®‡§∞‡§∂‡§ø‡§™ ‚Äî ‡§∞‡•Ä‡§®‡§æ‡§â‡§Ç‡§∏‡•ç‡§°",
      c3p: "‡§è‡§°‡§Æ‡§ø‡§® ‡§∏‡•ç‡§µ‡§ø‡§ö ‡§®‡§π‡•Ä‡§Ç ‚Äî ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç, ‡§ï‡•ã‡§° ‡§â‡§§‡•ç‡§§‡§∞‡§¶‡§æ‡§Ø‡•Ä‡•§",
      s1: "‡§ï‡•â‡§®‡•ç‡§ü‡•ç‡§∞‡•à‡§ï‡•ç‡§ü", s1v: "‡§™‡§§‡§æ ‡§≤‡•â‡§®‡•ç‡§ö-‡§°‡•á ‡§™‡§∞ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§ø‡§§ ‡§π‡•ã‡§ó‡§æ",
      s2: "‡§Ü‡§∞‡•ç‡§ï‡§ø‡§ü‡•á‡§ï‡•ç‡§ö‡§∞", s2v: "OpenZeppelin ‡§∏‡•ç‡§ü‡•à‡§ï, ‡§Æ‡§æ‡§®‡§ï ‡§™‡•à‡§ü‡§∞‡•ç‡§®", s2v2: "‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§æ‡§§‡•ç‡§Æ‡§ï ‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§° ‡§®‡§π‡•Ä‡§Ç‡•§",
      s3: "‡§™‡•â‡§≤‡§ø‡§∏‡•Ä", pills: ["Fair Launch", "No Presale", "Anti-Rug ‡§®‡•Ä‡§§‡§ø"]
    },
    partners: { header: "As seen on / Partners" },
    signals: {
      kicker: "‡§∏‡§Ç‡§ï‡•á‡§§",
      title: "‡§∂‡§æ‡§Ç‡§§ ‡§ü‡•ã‡§®, ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§á‡§∞‡§æ‡§¶‡§æ",
      caption: "‡§π‡§Æ‡•á‡§Ç ‡§Ü‡§Å‡§ï‡§°‡§º‡•á ‡§î‡§∞ ‡§π‡•ç‡§Ø‡•Ç‡§Æ‡§∞ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à‡§Ç ‚Äî ‡§®‡§ø‡§Ø‡§Æ ‡§∏‡§∞‡§≤ ‡§π‡•ã‡§Ç ‡§§‡•ã ‡§∏‡§æ‡§• ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§",
      q1: "‚Äú‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ï‡•â‡§≤-‡§ú‡•à‡§∏‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ, ‡§Æ‡§ú‡§º‡§æ‡§ï ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä ‡§™‡§∞ ‡§®‡§ú‡§º‡§∞‡•§‚Äù",
      q2: "‚Äú‡§ó‡§æ‡§∞‡•ç‡§≤‡§ø‡§ï ‡§µ‡§æ‡§á‡§¨ ‡§™‡•Ç‡§Å‡§ú‡•Ä ‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‚Äî ‡§¶‡•Å‡§∞‡•ç‡§≤‡§≠‡•§‚Äù",
      q3: "‚Äú‡§ú‡§º‡•Ä‡§∞‡•ã-‡§ü‡•à‡§ï‡•ç‡§∏ ‡§î‡§∞ ‡§∞‡•Ä‡§®‡§æ‡§â‡§Ç‡§∏‡•ç‡§° ‚Äî ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡•§ ‡§Ü‡§ó‡•á ‡§¨‡§æ‡§ú‡§º‡§æ‡§∞‡•§‚Äù"
    },
    tokenomics: {
      kicker: "‡§ü‡•ã‡§ï‡§®‡•â‡§Æ‡§ø‡§ï‡•ç‡§∏",
      title: "‡§™‡§æ‡§∞‡§¶‡§∞‡•ç‡§∂‡•Ä ‡§î‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡•á‡§Ø",
      caption: "‡§ï‡§Æ ‡§™‡•à‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞ ‚Äî ‡§ï‡§Æ ‡§Ö‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§‡§§‡§æ‡•§ ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó ‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä-‡§ì‡§∞‡§ø‡§è‡§Ç‡§ü‡•á‡§° ‡§π‡•à‡•§",
      supply: "‡§ï‡•Å‡§≤ ‡§∏‡§™‡•ç‡§≤‡§æ‡§à",
      taxes: "‡§ü‡•à‡§ï‡•ç‡§∏", taxesVal: "0 %",
      liquidity: "‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä", liquidityVal: "‡§≤‡•â‡§ï‡•ç‡§°",
      dist: "‡§µ‡§ø‡§§‡§∞‡§£",
      distList: ["60% ‚Äî ‡§≤‡§ø‡§ï‡•ç‡§µ‡§ø‡§°‡§ø‡§ü‡•Ä", "20% ‚Äî ‡§ï‡§Æ‡•ç‡§Ø‡•Å‡§®‡§ø‡§ü‡•Ä / ‡§è‡§Ø‡§∞‡§°‡•ç‡§∞‡•â‡§™ / ‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü", "10% ‚Äî ‡§™‡§æ‡§∞‡•ç‡§ü‡§®‡§∞‡§∂‡§ø‡§™", "10% ‚Äî DAO ‡§∞‡§ø‡§ú‡§º‡§∞‡•ç‡§µ (‡§Æ‡§≤‡•ç‡§ü‡•Ä‡§∏‡§ø‡§ó)"],
      arch: "‡§Ü‡§∞‡•ç‡§ï‡§ø‡§ü‡•á‡§ï‡•ç‡§ö‡§∞",
      archP: "‡§∏‡•ç‡§ü‡•à‡§Ç‡§°‡§∞‡•ç‡§° ‡§ï‡•â‡§®‡•ç‡§ü‡•ç‡§∞‡•à‡§ï‡•ç‡§ü, ‡§≤‡•â‡§®‡•ç‡§ö ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∞‡•Ä‡§®‡§æ‡§â‡§Ç‡§∏, ‡§®‡•â‡§®-‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§°‡•á‡§¨‡§≤‡•§",
      pills: ["OpenZeppelin", "Non-upgradeable", "DAO ‡§∞‡§ø‡§ú‡§º‡§∞‡•ç‡§µ"]
    },
    roadmap: {
      kicker: "‡§∞‡•ã‡§°‡§Æ‡•à‡§™",
      title: "‡§ï‡•ç‡§≤‡•Ä‡§® ‡§≤‡•â‡§®‡•ç‡§ö ‡§∏‡•á ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø ‡§§‡§ï",
      caption: "‡§≤‡§ö‡•Ä‡§≤‡§æ; ‡§π‡•ã‡§≤‡•ç‡§°‡§∞‡•ç‡§∏ ‡§î‡§∞ ‡§ï‡•ç‡§∞‡§ø‡§è‡§ü‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§™‡§∞ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§§‡•§",
      phase: "‡§´‡•á‡§ú‡§º",
      p1: ["‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü, ‡§∏‡•ã‡§∂‡§≤‡•ç‡§∏, DEX ‡§≤‡•â‡§®‡•ç‡§ö", "LP ‡§≤‡•â‡§ï, ‡§∞‡•Ä‡§®‡§æ‡§â‡§Ç‡§∏‡•ç‡§°", "‡§Æ‡•Ä‡§Æ ‡§®‡•à‡§∞‡•á‡§ü‡§ø‡§µ ‡§î‡§∞ ‡§µ‡§ø‡§ú‡§º‡•Å‡§Ö‡§≤ ‡§≤‡•à‡§Ç‡§ó‡•ç‡§µ‡•á‡§ú"],
      p2: ["NFT ‚ÄúCloves‚Äù ‚Äî ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§π‡•á‡§§‡•Å", "‡§Ü‡§∞‡•ç‡§ü‡§ø‡§∏‡•ç‡§ü ‡§ï‡•ã‡§≤‡•à‡§¨‡•ã‡§∞‡•á‡§∂‡§®", "‡§ï‡§Æ‡•ç‡§Ø‡•Å‡§®‡§ø‡§ü‡•Ä ‡§è‡§ï‡•ç‡§ü‡§ø‡§µ‡•á‡§∂‡§® ‡§î‡§∞ ‡§∞‡•à‡§´‡§≤"],
      p3: ["Garlic DAO (‡§ï‡•ç‡§∞‡§ø‡§è‡§ü‡§∞ ‡§ó‡•ç‡§∞‡§æ‡§Ç‡§ü)", "‡§Æ‡§ø‡§®‡•Ä-‡§ó‡•á‡§Æ‡•ç‡§∏ / ‡§á‡§Ç‡§ü‡•Ä‡§ó‡•ç‡§∞‡•á‡§∂‡§®", "CEX ‡§≤‡§ø‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó (‡§∏‡§Ç‡§≠‡§µ ‡§π‡•ã ‡§§‡•ã)"]
    },
    buy: {
      kicker: "‡§ï‡•à‡§∏‡•á ‡§ñ‡§∞‡•Ä‡§¶‡•á‡§Ç",
      title: "‡§§‡•Ä‡§® ‡§∏‡•ç‡§ü‡•á‡§™, ‡§¨‡§ø‡§®‡§æ ‡§ù‡§Ç‡§ù‡§ü",
      caption: "‡§µ‡•â‡§≤‡•á‡§ü ‚Äî ‡§¨‡•á‡§∏ ‡§ï‡•â‡§á‡§® ‚Äî ‡§∏‡•ç‡§µ‡•à‡§™‡•§ ‡§´‡§ø‡§∞ ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡•§",
      s1: "‡§µ‡•â‡§≤‡•á‡§ü", s1p: "MetaMask / Rabby / OKX. ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§ö‡•Å‡§®‡•á‡§Ç (ETH/BSC).",
      s2: "‡§¨‡•á‡§∏ ‡§î‡§∞ ‡§ó‡•à‡§∏", s2p: "‡§∏‡•ç‡§µ‡•à‡§™ ‡§µ ‡§´‡§º‡•Ä‡§∏ ‡§π‡•á‡§§‡•Å ETH/BNB ‡§ú‡•ã‡§°‡§º‡•á‡§Ç‡•§",
      s3: "‡§∏‡•ç‡§µ‡•à‡§™ ‡§ü‡•Ç $GARLIC", s3p: "Uniswap / PancakeSwap. ‡§™‡§§‡§æ ‡§≤‡•â‡§®‡•ç‡§ö-‡§°‡•á ‡§™‡§∞ ‡§≤‡§æ‡§á‡§µ ‡§π‡•ã‡§ó‡§æ‡•§",
      cta: "‡§ï‡§Æ‡•ç‡§Ø‡•Å‡§®‡§ø‡§ü‡•Ä ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç",
      note: "* ‡§Ø‡§π ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü‡•ã ‡§Ö‡§∏‡•ç‡§•‡§ø‡§∞ ‡§π‡•à‡•§"
    },
    community: {
      kicker: "‡§ï‡§Æ‡•ç‡§Ø‡•Å‡§®‡§ø‡§ü‡•Ä",
      title: "‡§§‡§∞‡•ç‡§ï‡§∏‡§Ç‡§ó‡§§ ‡§Æ‡•Ä‡§Æ: ‡§Æ‡•Å‡§∏‡•ç‡§ï‡§æ‡§® ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§∂‡§æ‡§∏‡§®",
      caption: "‡§Ö‡§®‡§æ‡§â‡§Ç‡§∏‡§Æ‡•á‡§Ç‡§ü, ‡§ö‡§∞‡•ç‡§ö‡§æ, ‡§∞‡•à‡§´‡§≤, ‡§¨‡§ø‡§≤‡•ç‡§° ‚Äî ‡§ú‡•Å‡§°‡§º‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§´‡•ç‡§≤‡•á‡§µ‡§∞ ‡§≤‡§æ‡§è‡§Å‡•§"
    },
    footer: {
      disclaimer: "‡§Æ‡•Ä‡§Æ-‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü‡•§ ‡§≤‡§æ‡§≠ ‡§ï‡•Ä ‡§ó‡§æ‡§∞‡§Ç‡§ü‡•Ä ‡§®‡§π‡•Ä‡§Ç‡•§",
      hint: "‡§¶‡§¨‡§æ‡§è‡§Å",
      hintAfter: "‚Äî ‡§ü‡•ã‡§ï‡§®‡•â‡§Æ‡§ø‡§ï‡•ç‡§∏"
    }
  },
  id: {
    nav: { approach: "Pendekatan", policy: "Kebijakan", tokenomics: "Tokenomik", roadmap: "Peta Jalan", buy: "Beli" },
    trustStrip: ["Peluncuran Adil", "Tanpa Pajak", "LP Terkunci", "Kepemilikan Dilepas"],
    hero: {
      tags: ["disiplin", "likuiditas-first", "komunitas"],
      titleTop: "GARLIC",
      titleBottom: "Meme dengan disiplin protokol.",
      paragraph:
        "Aturan ditetapkan di kode: peluncuran adil, 0% biaya transaksi, likuiditas terkunci, kepemilikan dilepas. Kami buang noise ‚Äî fokus pada ide & likuiditas; pasar yang bergerak.",
      buy: "Masuk posisi",
      policy: "Kebijakan protokol",
      badge: "rule-based ‚Ä¢ meme-driven",
      marquee: [
        "Satu awal untuk semua",
        "0% pajak",
        "Likuiditas terkunci",
        "Kepemilikan dilepas",
        "Budaya mendorong adopsi"
      ],
      keyHint: "‚Äî tokenomik"
    },
    approach: {
      kicker: "Pendekatan",
      title: "Struktur profesional, presentasi meme",
      caption: "Meme yang mudah dibaca oleh modal: aturan sederhana, friksi rendah, simbol budaya.",
      c1t: "Peluncuran adil, tanpa akal-akal",
      c1p: "Tanpa alokasi privat. Satu horizon masuk ‚Äî satu suhu pasar.",
      c2t: "Tanpa pajak, friksi rendah",
      c2p: "Tanpa pajak transaksi ‚Äî fokus pada likuiditas & spread, bukan saklar.",
      c3t: "Budaya ‚Ä∫ pemasaran",
      c3p: "Simbol kuat üßÑ, humor & ketertiban ‚Äî konten lahir dari komunitas."
    },
    policy: {
      kicker: "Kebijakan",
      title: "Yang dikunci oleh aturan",
      caption: "Ekspektasi diformalkan sejak awal. Setelan jelas ‚Üí perilaku token yang dapat diprediksi.",
      c1t: "Biaya transaksi ‚Äî 0%",
      c1p: "Perdagangan tanpa pajak. Friksi minimal; likuiditas prioritas.",
      c2t: "Likuiditas terkunci",
      c2p: "Pool dikunci saat peluncuran ‚Äî desain anti-manipulasi tergesa-gesa.",
      c3t: "Kepemilikan dilepas",
      c3p: "Tanpa saklar admin ‚Äî kode yang bertanggung jawab, bukan orang.",
      s1: "Kontrak", s1v: "Alamat diumumkan saat peluncuran",
      s2: "Arsitektur", s2v: "Stack OpenZeppelin & pola standar", s2v2: "Tanpa upgrade eksperimental.",
      s3: "Kebijakan", pills: ["Fair Launch", "No Presale", "Kebijakan Anti-Rug"]
    },
    partners: { header: "As seen on / Partners" },
    signals: {
      kicker: "Sinyal",
      title: "Nada tenang, niat serius",
      caption: "Kami suka angka dan humor; keduanya rukun saat aturannya simpel.",
      q1: "‚ÄúStrukturnya protokol, bukan lelucon. Pantau likuiditas.‚Äù",
      q2: "‚ÄúVibe garlic dijelaskan dalam bahasa modal ‚Äî jarang.‚Äù",
      q3: "‚ÄúZero-tax & renounced ‚Äî konfig stabil. Sisanya pasar.‚Äù"
    },
    tokenomics: {
      kicker: "Tokenomik",
      title: "Transparan & dapat diprediksi",
      caption: "Parameter lebih sedikit ‚Äî ketidakpastian lebih kecil. Konfigurasi memprioritaskan likuiditas.",
      supply: "Total suplai",
      taxes: "Pajak", taxesVal: "0 %",
      liquidity: "Likuiditas", liquidityVal: "Terkunci",
      dist: "Distribusi",
      distList: ["60% ‚Äî Likuiditas", "20% ‚Äî Komunitas / airdrop / quest", "10% ‚Äî Kemitraan", "10% ‚Äî Cadangan DAO (multisig)"],
      arch: "Arsitektur",
      archP: "Kontrak standar, kepemilikan dilepas setelah peluncuran, non-upgradeable.",
      pills: ["OpenZeppelin", "Non-upgradeable", "Cadangan DAO"]
    },
    roadmap: {
      kicker: "Peta Jalan",
      title: "Dari peluncuran bersih ke budaya",
      caption: "Fleksibel, berfokus pada nilai bagi holder & kreator.",
      phase: "Fase",
      p1: ["Situs, sosial, peluncuran DEX", "LP terkunci, renounced", "Narasi meme & bahasa visual"],
      p2: ["NFT ‚ÄúCloves‚Äù untuk yang aktif", "Kolaborasi artis", "Aktivasi komunitas & raffle"],
      p3: ["Garlic DAO (hibah kreator)", "Gim mini / integrasi", "Listing CEX (bila memungkinkan)"]
    },
    buy: {
      kicker: "Cara beli",
      title: "Tiga langkah, tanpa ribet",
      caption: "Wallet ‚Äî koin dasar ‚Äî swap. Lalu budaya.",
      s1: "Wallet", s1p: "MetaMask / Rabby / OKX. Pilih jaringan (ETH/BSC).",
      s2: "Dasar & gas", s2p: "Isi ETH/BNB untuk swap & biaya jaringan.",
      s3: "Swap ke $GARLIC", s3p: "Uniswap / PancakeSwap. Alamat live saat peluncuran.",
      cta: "Gabung komunitas",
      note: "* Bukan nasihat keuangan. Kripto volatil."
    },
    community: {
      kicker: "Komunitas",
      title: "Meme rasional: senyum dengan disiplin",
      caption: "Pengumuman, diskusi, raffle, build ‚Äî gabung & bawa rasa kamu."
    },
    footer: {
      disclaimer: "Proyek meme. Tidak ada jaminan profit.",
      hint: "Tekan",
      hintAfter: "‚Äî tokenomik"
    }
  }
};

/* helpers for i18n */
const LangContext = createContext({ lang: FALLBACK, setLang: (_l) => {} });
function getDeep(obj, path) {
  return path.split(".").reduce((o, k) => (o && o[k] != null ? o[k] : undefined), obj);
}
function useT() {
  const { lang } = useContext(LangContext);
  return (path) => getDeep(DICT[lang], path) ?? getDeep(DICT[FALLBACK], path) ?? "";
}

/* ======================= UI helpers ======================= */
function cn(...classes) { return classes.filter(Boolean).join(" "); }

const Container = ({ className, children }) => (
  <div className={cn("mx-auto w-full max-w-[1200px] px-4 md:px-8", className)}>{children}</div>
);

const SectionTitle = ({ kicker, title, caption, className }) => (
  <div className={cn("mb-10 text-center", className)}>
    {kicker && (<div className="mb-2 text-xs tracking-[0.2em] uppercase text-lime-300/80">{kicker}</div>)}
    <h2 className="font-display text-3xl md:text-5xl font-extrabold leading-tight bg-gradient-to-r from-lime-300 via-white to-lime-400 bg-clip-text text-transparent">
      {title}
    </h2>
    {caption && (<p className="mt-4 text-sm md:text-base text-white/70 max-w-2xl mx-auto">{caption}</p>)}
  </div>
);

const Noise = () => (
  <div
    aria-hidden
    className="pointer-events-none fixed inset-0 z-[1] opacity-[0.06] mix-blend-soft-light"
    style={{
      backgroundImage:
        'url("data:image/svg+xml;utf8,<svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"140\\" height=\\"140\\"><filter id=\\"n\\"><feTurbulence baseFrequency=\\"0.7\\" numOctaves=\\"3\\"/></filter><rect width=\\"100%\\" height=\\"100%\\" filter=\\"url(%23n)\\" opacity=\\"0.8\\"/></svg>")'
    }}
  />
);

const Glow = ({ className }) => (<div className={cn("absolute -z-10 blur-3xl", className)} />);

const Card = ({ className, children }) => (
  <motion.div
    initial={{ opacity: 0, y: 36 }}
    whileInView={{ opacity: 1, y: 0 }}
    viewport={{ once: true, amount: 0.24 }}
    transition={{ duration: 0.6, ease: "easeOut" }}
    className={cn(
      "group relative rounded-3xl border border-white/10 bg-white/[0.02] p-6 backdrop-blur-xl",
      "shadow-[inset_0_1px_0_0_rgba(255,255,255,0.05),0_10px_30px_-10px_rgba(0,0,0,0.45)]",
      "transition-transform duration-300 will-change-transform hover:-translate-y-1",
      className
    )}
  >
    <div className="pointer-events-none absolute inset-0 rounded-3xl [background:linear-gradient(180deg,rgba(255,255,255,0.12),rgba(255,255,255,0.02))] opacity-70" />
    {children}
  </motion.div>
);

const Kbd = ({ children }) => (
  <kbd className="inline-flex items-center gap-1 rounded-md border border-white/10 bg-white/[0.04] px-2 py-1 text-[10px] uppercase tracking-wider text-white/70">{children}</kbd>
);

const Btn = ({ className, children, ...rest }) => (
  <motion.button
    whileHover={{ scale: 1.02, rotate: -1 }}
    whileTap={{ scale: 0.98 }}
    {...rest}
    className={cn(
      "relative inline-flex items-center gap-2 rounded-full px-5 py-3",
      "font-semibold tracking-wide",
      "bg-gradient-to-b from-lime-400 to-lime-500 text-black",
      "shadow-[0_8px_20px_-6px_rgba(132,204,22,0.6)] hover:shadow-[0_12px_28px_-6px_rgba(132,204,22,0.75)]",
      className
    )}
  >
    {children}
  </motion.button>
);

/* ======================= —ç—Ñ—Ñ–µ–∫—Ç—ã ======================= */
function useMouseParallax(strength = 20) {
  const ref = useRef(null);
  const x = useMotionValue(0);
  const y = useMotionValue(0);
  useEffect(() => {
    const el = ref.current;
    if (!el) return;
    const onMove = (e) => {
      const r = el.getBoundingClientRect();
      const mx = e.clientX - r.left - r.width / 2;
      const my = e.clientY - r.top - r.height / 2;
      x.set((mx / r.width) * strength);
      y.set((my / r.height) * strength);
    };
    const onLeave = () => { x.set(0); y.set(0); };
    el.addEventListener("mousemove", onMove);
    el.addEventListener("mouseleave", onLeave);
    return () => { el.removeEventListener("mousemove", onMove); el.removeEventListener("mouseleave", onLeave); };
  }, [x, y, strength]);
  return { ref, x, y };
}

/* ======================= SVG –ª–æ–≥–æ—Ç–∏–ø ======================= */
const GarlicSVG = ({ className, tiltX, tiltY }) => (
  <motion.svg viewBox="0 0 300 300" className={cn("drop-shadow-2xl", className)}
    style={{ x: tiltX, y: tiltY }} initial={{ rotate: -6, scale: 0.9 }}
    animate={{ rotate: [-6, 6, -6], scale: [0.9, 1, 0.9] }} transition={{ duration: 10, ease: "easeInOut", repeat: Infinity }}>
    <defs>
      <radialGradient id="gBulb" cx="50%" cy="40%" r="60%"><stop offset="0%" stopColor="#f5fff1"/><stop offset="70%" stopColor="#d7f7b5"/><stop offset="100%" stopColor="#b4f28a"/></radialGradient>
      <linearGradient id="gStroke" x1="0" y1="0" x2="0" y2="1"><stop offset="0%" stopColor="#8fe36a" /><stop offset="100%" stopColor="#4d7c0f" /></linearGradient>
      <filter id="soft" x="-20%" y="-20%" width="140%" height="140%"><feGaussianBlur in="SourceGraphic" stdDeviation="1.5"/></filter>
    </defs>
    <path d="M150 60c-10 18-16 29-24 38-28 33-50 38-50 82 0 42 37 68 74 68s74-26 74-68c0-44-22-49-50-82-8-9-14-20-24-38z" fill="url(#gBulb)" stroke="url(#gStroke)" strokeWidth="3" />
    <path d="M150 64c-6 36-12 62-12 116" stroke="#4d7c0f" strokeWidth="2" opacity=".4"/>
    <path d="M170 74c-4 32-8 60-8 102" stroke="#4d7c0f" strokeWidth="2" opacity=".3"/>
    <path d="M130 74c4 32 8 60 8 102" stroke="#4d7c0f" strokeWidth="2" opacity=".3"/>
    <path d="M150 40c8 10 12 24 10 36-6-6-14-10-22-12 2-10 6-18 12-24z" fill="#b4f28a" stroke="#4d7c0f" strokeWidth="2" filter="url(#soft)"/>
    <ellipse cx="120" cy="150" rx="12" ry="28" fill="#fff" opacity=".25"/>
    <ellipse cx="185" cy="180" rx="8" ry="18" fill="#fff" opacity=".18"/>
  </motion.svg>
);

const Pill = ({ children }) => (<span className="rounded-full border border-lime-300/30 bg-lime-300/10 px-3 py-1 text-xs text-lime-200">{children}</span>);

const Marquee = ({ items }) => (
  <div className="relative overflow-hidden [mask-image:linear-gradient(to_right,transparent,black_15%,black_85%,transparent)]">
    <div className="animate-[marquee_18s_linear_infinite] whitespace-nowrap">
      {items.concat(items).map((it, i) => (
        <span key={i} className="mx-6 inline-flex items-center gap-2 text-sm text-white/70">
          <span className="h-1.5 w-1.5 rounded-full bg-lime-400 inline-block" /> {it}
        </span>
      ))}
    </div>
    <style>{`@keyframes marquee { from { transform: translateX(0); } to { transform: translateX(-50%); } }`}</style>
  </div>
);

const Counter = ({ to, suffix }) => {
  const [val, setVal] = useState(0);
  useEffect(() => {
    const start = performance.now();
    const loop = (t) => {
      const p = Math.min(1, (t - start) / 1200);
      setVal(Math.round(to * (0.5 - Math.cos(Math.PI * p) / 2)));
      if (p < 1) requestAnimationFrame(loop);
    };
    const id = requestAnimationFrame(loop);
    return () => cancelAnimationFrame(id);
  }, [to]);
  return <>{val.toLocaleString()} {suffix}</>;
};

/* ======================= Language Switcher (custom dropdown) ======================= */
const LanguageSwitcher = () => {
  const { lang, setLang } = useContext(LangContext);
  const [open, setOpen] = useState(false);
  const ref = useRef(null);

  useEffect(() => {
    const onDoc = (e) => { if (!ref.current?.contains(e.target)) setOpen(false); };
    const onKey = (e) => { if (e.key === "Escape") setOpen(false); };
    document.addEventListener("mousedown", onDoc);
    document.addEventListener("keydown", onKey);
    return () => {
      document.removeEventListener("mousedown", onDoc);
      document.removeEventListener("keydown", onKey);
    };
  }, []);

  const options = [
    { value: "en", label: "EN", hint: "English" },
    { value: "hi", label: "‡§π‡§ø‡§Ç‡§¶‡•Ä", hint: "Hindi" },
    { value: "id", label: "ID", hint: "Bahasa" },
  ];
  const current = options.find(o => o.value === lang) || options[0];

  return (
    <div className="relative" ref={ref}>
      <button
        type="button"
        onClick={() => setOpen(v => !v)}
        className="inline-flex items-center gap-2 rounded-full border border-white/15 bg-white/[0.06] px-3 py-2 text-xs text-white/80 hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-lime-300/50"
        aria-haspopup="listbox"
        aria-expanded={open}
      >
        <span className="font-semibold">{current.label}</span>
        <ChevronRight className={`h-3 w-3 transition-transform ${open ? "rotate-90" : "rotate-0"}`} />
      </button>

      <AnimatePresence>
        {open && (
          <motion.ul
            initial={{ opacity: 0, y: -6, scale: 0.98 }}
            animate={{ opacity: 1, y: 8, scale: 1 }}
            exit={{ opacity: 0, y: -6, scale: 0.98 }}
            transition={{ duration: 0.18, ease: "easeOut" }}
            role="listbox"
            className="absolute right-0 z-50 mt-2 w-44 overflow-hidden rounded-xl border border-white/10 bg-[#0b0f0a]/90 backdrop-blur-xl shadow-[0_10px_30px_-12px_rgba(0,0,0,.6)]"
          >
            {options.map(opt => (
              <li key={opt.value}>
                <button
                  onClick={() => { setLang(opt.value); setOpen(false); }}
                  role="option"
                  aria-selected={lang === opt.value}
                  className={`flex w-full items-center justify-between gap-2 px-3 py-2.5 text-sm
                    ${lang === opt.value ? "bg-white/[0.07] text-white" : "text-white/80 hover:bg-white/[0.06]"}`}
                >
                  <span>{opt.label}</span>
                  <span className="text-[10px] text-white/40">{opt.hint}</span>
                </button>
              </li>
            ))}
          </motion.ul>
        )}
      </AnimatePresence>
    </div>
  );
};

/* ======================= Header c –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º ======================= */
const Header = () => {
  const t = useT();
  return (
    <div className="fixed inset-x-0 top-0 z-40">
      <Container>
        <motion.div
          initial={{ opacity: 0, y: -16 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, ease: "easeOut" }}
          className="mt-4 flex items-center justify-between rounded-2xl border border-white/10 bg-white/[0.03] px-4 py-2 backdrop-blur-xl"
        >
          <a href="#top" className="flex items-center gap-2">
            <span className="text-2xl">üßÑ</span>
            <span className="font-semibold tracking-wide">GARLIC</span>
          </a>
          <nav className="hidden md:flex items-center gap-6 text-sm text-white/80">
            <a href="#about" className="hover:text-white">{t("nav.approach")}</a>
            <a href="#policy" className="hover:text-white">{t("nav.policy")}</a>
            <a href="#token" className="hover:text-white">{t("nav.tokenomics")}</a>
            <a href="#roadmap" className="hover:text-white">{t("nav.roadmap")}</a>
            <a href="#buy" className="hover:text-white">{t("nav.buy")}</a>
          </nav>
          <div className="flex items-center gap-2">
            <a href="#buy" className="hidden md:block">
              <Btn>{t("nav.buy")} $GARLIC <ChevronRight className="h-4 w-4"/></Btn>
            </a>
            <LanguageSwitcher />
          </div>
        </motion.div>
      </Container>
    </div>
  );
};

/* ======================= HERO ======================= */
const Hero = () => {
  const t = useT();
  const { ref, x, y } = useMouseParallax(24);
  const sx = useSpring(x, { stiffness: 120, damping: 16 });
  const sy = useSpring(y, { stiffness: 120, damping: 16 });

  return (
    <section id="top" ref={ref} className="relative overflow-hidden pt-32 md:pt-40">
      {/* policy strip */}
      <div className="absolute left-0 right-0 top-20 z-20">
        <Container>
          <div className="flex flex-wrap items-center justify-center gap-3 rounded-full border border-white/10 bg-white/[0.04] px-4 py-2 text-[11px] text-white/70 backdrop-blur">
            {["0","1","2","3"].map((i, idx) => (
              <React.Fragment key={i}>
                {idx !== 0 && <span className="opacity-30">‚Ä¢</span>}
                <span className={idx===0 ? "text-white/90" : ""}>{t(`trustStrip.${i}`)}</span>
              </React.Fragment>
            ))}
          </div>
        </Container>
      </div>

      <Glow className="left-[10%] top-[0%] h-[35rem] w-[35rem] bg-lime-400/30" />
      <Glow className="right-[-10%] top-[30%] h-[40rem] w-[40rem] bg-emerald-500/20" />
      <Glow className="left-1/3 top-[70%] h-[28rem] w-[28rem] bg-lime-300/20" />

      <Container>
        <div className="grid items-center gap-8 md:grid-cols-2">
          <motion.div className="relative z-10"
            initial={{ opacity: 0, y: 24 }} whileInView={{ opacity: 1, y: 0 }} viewport={{ once: true }} transition={{ duration: 0.6 }}>
            <div className="mb-4 flex items-center gap-2 text-xs text-white/70">
              {t("hero.tags.0") && <Pill>{t("hero.tags.0")}</Pill>}
              {t("hero.tags.1") && <Pill>{t("hero.tags.1")}</Pill>}
              {t("hero.tags.2") && <Pill>{t("hero.tags.2")}</Pill>}
            </div>
            <h1 className="font-display text-5xl md:text-7xl font-black leading-[0.95]">
              <span className="bg-gradient-to-r from-white via-lime-200 to-lime-400 bg-clip-text text-transparent">{t("hero.titleTop")}</span>
              <span className="block text-white/80">{t("hero.titleBottom")}</span>
            </h1>
            <p className="mt-6 max-w-xl text-white/70">{t("hero.paragraph")}</p>
            <div className="mt-8 flex flex-wrap items-center gap-3">
              <a href="#buy"><Btn>{t("hero.buy")} <ExternalLink className="h-4 w-4"/></Btn></a>
              <a href="#policy" className="rounded-full border border-white/15 px-5 py-3 text-sm text-white/80 hover:bg-white/5">{t("hero.policy")}</a>
              <div className="hidden md:flex items-center gap-2 text-xs text-white/50"><Kbd>G</Kbd><span>{t("hero.keyHint")}</span></div>
            </div>
          </motion.div>

          <motion.div className="relative -mr-6 md:mr-0"
            initial={{ opacity: 0, scale: 0.96 }} whileInView={{ opacity: 1, scale: 1 }} viewport={{ once: true }} transition={{ duration: 0.7 }}>
            <div className="absolute inset-0 -z-10 rounded-[2.5rem] bg-gradient-to-br from-white/10 to-white/0 blur-2xl" />
            <div className="relative aspect-square rounded-[2.5rem] border border-white/10 bg-white/[0.03] p-6 backdrop-blur-2xl">
              <GarlicSVG className="h-full w-full" tiltX={sx} tiltY={sy} />
              <div className="pointer-events-none absolute inset-4 rounded-[2rem] border border-white/5" />
              <div className="pointer-events-none absolute -left-6 top-6"><Pill>{t("hero.badge")}</Pill></div>
            </div>
          </motion.div>
        </div>

        <div className="mt-10 md:mt-14">
          <Marquee items={[
            t("hero.marquee.0"), t("hero.marquee.1"), t("hero.marquee.2"), t("hero.marquee.3"), t("hero.marquee.4")
          ]} />
        </div>
      </Container>
    </section>
  );
};

/* ======================= Approach ======================= */
const About = () => {
  const t = useT();
  return (
    <section id="about" className="relative py-20 md:py-28">
      <Container>
        <SectionTitle
          kicker={t("approach.kicker")}
          title={t("approach.title")}
          caption={t("approach.caption")}
        />
        <div className="grid gap-6 md:grid-cols-3">
          <Card>
            <div className="mb-4 flex h-10 w-10 items-center justify-center rounded-xl bg-lime-300/20 text-lime-200"><Rocket className="h-5 w-5"/></div>
            <h3 className="text-lg font-semibold">{t("approach.c1t")}</h3>
            <p className="mt-2 text-sm text-white/70">{t("approach.c1p")}</p>
          </Card>
          <Card>
            <div className="mb-4 flex h-10 w-10 items-center justify-center rounded-xl bg-lime-300/20 text-lime-200"><Coins className="h-5 w-5"/></div>
            <h3 className="text-lg font-semibold">{t("approach.c2t")}</h3>
            <p className="mt-2 text-sm text-white/70">{t("approach.c2p")}</p>
          </Card>
          <Card>
            <div className="mb-4 flex h-10 w-10 items-center justify-center rounded-xl bg-lime-300/20 text-lime-200"><Sparkles className="h-5 w-5"/></div>
            <h3 className="text-lg font-semibold">{t("approach.c3t")}</h3>
            <p className="mt-2 text-sm text-white/70">{t("approach.c3p")}</p>
          </Card>
        </div>
      </Container>
    </section>
  );
};

/* ======================= Policy ======================= */
const Policy = () => {
  const t = useT();
  return (
    <section id="policy" className="relative py-20 md:py-28">
      <Container>
        <SectionTitle
          kicker={t("policy.kicker")}
          title={t("policy.title")}
          caption={t("policy.caption")}
        />
        <div className="grid gap-6 md:grid-cols-3">
          <Card>
            <div className="mb-4 flex h-10 w-10 items-center justify-center rounded-xl bg-emerald-400/20 text-emerald-200"><GaugeCircle className="h-5 w-5"/></div>
            <h3 className="text-lg font-semibold">{t("policy.c1t")}</h3>
            <p className="mt-2 text-sm text-white/70">{t("policy.c1p")}</p>
          </Card>
          <Card>
            <div className="mb-4 flex h-10 w-10 items-center justify-center rounded-xl bg-emerald-400/20 text-emerald-200"><Lock className="h-5 w-5"/></div>
            <h3 className="text-lg font-semibold">{t("policy.c2t")}</h3>
            <p className="mt-2 text-sm text-white/70">{t("policy.c2p")}</p>
          </Card>
          <Card>
            <div className="mb-4 flex h-10 w-10 items-center justify-center rounded-xl bg-emerald-400/20 text-emerald-200"><Shield className="h-5 w-5"/></div>
            <h3 className="text-lg font-semibold">{t("policy.c3t")}</h3>
            <p className="mt-2 text-sm text-white/70">{t("policy.c3p")}</p>
          </Card>
        </div>

        <div className="mt-6 grid gap-6 md:grid-cols-3">
          <Card>
            <h4 className="text-sm text-white/60">{t("policy.s1")}</h4>
            <div className="mt-2 text-sm">
              <span className="inline-flex items-center gap-2 rounded-full border border-white/15 px-3 py-1 text-white/80">
                <LinkIcon className="h-4 w-4"/> <span className="text-white/60">{t("policy.s1v")}</span>
              </span>
            </div>
          </Card>
          <Card>
            <h4 className="text-sm text-white/60">{t("policy.s2")}</h4>
            <div className="mt-2 flex items-center gap-2 text-sm text-white/70">
              <Layers className="h-4 w-4 opacity-70"/> {t("policy.s2v")}
            </div>
            <p className="mt-2 text-sm text-white/60">{t("policy.s2v2")}</p>
          </Card>
          <Card>
            <h4 className="text-sm text-white/60">{t("policy.s3")}</h4>
            <div className="mt-2 flex flex-wrap gap-2">
              <Pill>{t("policy.pills.0")}</Pill><Pill>{t("policy.pills.1")}</Pill><Pill>{t("policy.pills.2")}</Pill>
            </div>
          </Card>
        </div>
      </Container>
    </section>
  );
};

/* ======================= Partners (svg badges) ======================= */
const PartnerBadge = ({ keyName, label, href, from = "#a3e635", to = "#84cc16" }) => {
  const gid = `grad-${keyName}`;
  const gidSoft = `grad-soft-${keyName}`;
  const gidShine = `grad-shine-${keyName}`;
  const clipId = `clip-${keyName}`;
  const glowId = `glow-${keyName}`;

  const Icon = () => {
    switch (keyName) {
      case "uniswap":
        return (
          <g>
            <path d="M8 10 v10 c0 8 6 14 14 14s14-6 14-14V10" fill="none" stroke={`url(#${gid})`} strokeWidth="2.6" strokeLinecap="round"/>
            <path d="M8 10 Q 22 2 36 10" fill="none" stroke={`url(#${gid})`} strokeWidth="2" strokeLinecap="round" opacity=".35"/>
          </g>
        );
      case "pancake":
        return (
          <g>
            <rect x="8" y="8" width="24" height="9" rx="4.5" fill={`url(#${gid})`} opacity=".9"/>
            <rect x="6" y="17" width="28" height="10" rx="5" fill={`url(#${gid})`} opacity=".6"/>
          </g>
        );
      case "dexscreener":
        return (
          <g>
            <polyline points="6,26 14,18 20,22 30,12" fill="none" stroke={`url(#${gid})`} strokeWidth="2.6" strokeLinecap="round" strokeLinejoin="round"/>
            <circle cx="14" cy="18" r="1.8" fill="#fff" opacity=".9"/><circle cx="20" cy="22" r="1.8" fill="#fff" opacity=".9"/>
          </g>
        );
      case "coingecko":
        return (
          <g>
            <circle cx="20" cy="20" r="14" fill={`url(#${gid})`} opacity=".65"/>
            <circle cx="16" cy="18" r="3.2" fill="#0b0f0a" opacity=".9"/>
            <path d="M20 26 q6 1 8 5" stroke="#0b0f0a" strokeWidth="2" opacity=".45" fill="none" strokeLinecap="round"/>
          </g>
        );
      case "cmc":
        return (
          <g>
            <circle cx="20" cy="20" r="12" fill="none" stroke={`url(#${gid})`} strokeWidth="2.4"/>
            <circle cx="20" cy="20" r="6"  fill="none" stroke={`url(#${gid})`} strokeWidth="2.4" opacity=".6"/>
          </g>
        );
      case "opensea":
        return (
          <g>
            <polygon points="22,8 28,20 16,20" fill={`url(#${gid})`} opacity=".9"/>
            <path d="M12 26 q8 -10 16 0" fill="none" stroke={`url(#${gid})`} strokeWidth="2.4"/>
            <path d="M10 26 h20"        fill="none" stroke={`url(#${gid})`} strokeWidth="2.2" opacity=".55"/>
          </g>
        );
      default:
        return null;
    }
  };

  const cornerStroke = { stroke: `url(#${gid})`, strokeWidth: 1.8, strokeLinecap: "round", fill: "none" };

  return (
    <a href={href} target="_blank" rel="noreferrer" className="group">
      <motion.svg
        width="180" height="52" viewBox="0 0 180 52"
        initial="rest" whileHover="hover"
        transition={{ type: "spring", stiffness: 320, damping: 20 }}
        className="drop-shadow-[0_10px_28px_rgba(132,204,22,0.16)]"
      >
        <defs>
          <linearGradient id={gid} x1="0" y1="0" x2="1" y2="1">
            <stop offset="0%" stopColor={from} /><stop offset="100%" stopColor={to} />
          </linearGradient>
          <linearGradient id={gidSoft} x1="0" y1="0" x2="0" y2="1">
            <stop offset="0%" stopColor="#ffffff" stopOpacity="0.22"/><stop offset="100%" stopColor="#ffffff" stopOpacity="0"/>
          </linearGradient>
          <linearGradient id={gidShine} x1="0" y1="0" x2="1" y2="0">
            <stop offset="0%" stopColor="#fff" stopOpacity="0"/><stop offset="50%" stopColor="#fff" stopOpacity="0.6"/><stop offset="100%" stopColor="#fff" stopOpacity="0"/>
          </linearGradient>
          <clipPath id={clipId}><rect x="1.5" y="1.5" width="177" height="49" rx="13.5"/></clipPath>
          <filter id={glowId} x="-40%" y="-40%" width="180%" height="180%">
            <feGaussianBlur in="SourceGraphic" stdDeviation="2" result="b"/><feMerge><feMergeNode in="b"/><feMergeNode in="SourceGraphic"/></feMerge>
          </filter>
        </defs>

        <rect x="1" y="1" width="178" height="50" rx="14" fill="rgba(255,255,255,0.06)"/>
        <rect x="2" y="2" width="176" height="24" rx="13" fill={`url(#${gidSoft})`} opacity=".8"/>

        {/* —É–≥–ª—ã */}
        <g filter={`url(#${glowId})`}>
          <motion.path variants={{ rest: { pathLength: 0 }, hover: { pathLength: 1 } }} transition={{ duration: 0.5, ease: "easeOut" }} d="M6 6 H22 M6 6 V22" {...cornerStroke} />
          <motion.path variants={{ rest: { pathLength: 0 }, hover: { pathLength: 1 } }} transition={{ duration: 0.5, ease: "easeOut", delay: 0.03 }} d="M174 6 H158 M174 6 V22" {...cornerStroke} />
          <motion.path variants={{ rest: { pathLength: 0 }, hover: { pathLength: 1 } }} transition={{ duration: 0.5, ease: "easeOut", delay: 0.06 }} d="M6 46 H22 M6 46 V30" {...cornerStroke} />
          <motion.path variants={{ rest: { pathLength: 0 }, hover: { pathLength: 1 } }} transition={{ duration: 0.5, ease: "easeOut", delay: 0.09 }} d="M174 46 H158 M174 46 V30" {...cornerStroke} />
        </g>

        {/* –±–ª–∏–∫ */}
        <g clipPath={`url(#${clipId})`}>
          <motion.rect
            variants={{ rest: { x: -70, opacity: 0 }, hover: { x: 220, opacity: 0.85 } }}
            y="0" width="70" height="52" rx="14"
            fill={`url(#${gidShine})`}
            transition={{ duration: 0.9, ease: "easeOut" }}
            style={{ mixBlendMode: "screen" }}
          />
        </g>

        {/* –õ–æ–≥–æ + —Ç–µ–∫—Å—Ç */}
        <g transform="translate(10,6)"><Icon /></g>
        <text x="60" y="31" fontFamily="var(--font-sans), ui-sans-serif" fontSize="12" letterSpacing="0.08em" fill="#fff" opacity="0.92">
          {label}
        </text>
      </motion.svg>
    </a>
  );
};

const Partners = () => {
  const t = useT();
  const partners = [
    { keyName: "uniswap",     label: "Uniswap",       href: "https://app.uniswap.org",     from: "#ff8bd5", to: "#ff3ac3" },
    { keyName: "pancake",     label: "PancakeSwap",   href: "https://pancakeswap.finance", from: "#f7c473", to: "#d98324" },
    { keyName: "dexscreener", label: "DEX Screener",  href: "https://dexscreener.com",     from: "#34d399", to: "#10b981" },
    { keyName: "coingecko",   label: "CoinGecko",     href: "https://www.coingecko.com",   from: "#a3e635", to: "#84cc16" },
    { keyName: "cmc",         label: "CoinMarketCap", href: "https://coinmarketcap.com",   from: "#60a5fa", to: "#3b82f6" },
    { keyName: "opensea",     label: "OpenSea",       href: "https://opensea.io",          from: "#93c5fd", to: "#60a5fa" },
  ];
  return (
    <section className="relative py-16">
      <Container>
        <div className="mb-8 text-center text-xs tracking-[0.2em] uppercase text-white/50">
          {t("partners.header")}
        </div>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 place-items-center">
          {partners.map((p) => <PartnerBadge key={p.keyName} {...p} />)}
        </div>
      </Container>
    </section>
  );
};

/* ======================= Testimonials ======================= */
const Testimonials = () => {
  const t = useT();
  const quotes = [t("signals.q1"), t("signals.q2"), t("signals.q3")].filter(Boolean);
  return (
    <section className="relative py-20 md:py-28">
      <Container>
        <SectionTitle kicker={t("signals.kicker")} title={t("signals.title")} caption={t("signals.caption")} />
        <div className="grid gap-6 md:grid-cols-3">
          {quotes.map((text, i) => (
            <Card key={i}>
              <div className="flex items-start gap-3">
                <Quote className="h-5 w-5 text-lime-300/80 mt-1"/>
                <div>
                  <p className="text-sm text-white/80">{text}</p>
                  <div className="mt-3 text-xs text-white/50">‚Äî @garlic_{i+1}</div>
                </div>
              </div>
            </Card>
          ))}
        </div>
      </Container>
    </section>
  );
};

/* ======================= Tokenomics ======================= */
const Tokenomics = () => {
  const t = useT();
  return (
    <section id="token" className="relative py-20 md:py-28">
      <Container>
        <SectionTitle kicker={t("tokenomics.kicker")} title={t("tokenomics.title")} caption={t("tokenomics.caption")}/>
        <div className="grid gap-6 md:grid-cols-12">
          <Card className="md:col-span-4">
            <div className="text-sm text-white/60">{t("tokenomics.supply")}</div>
            <div className="mt-2 text-3xl font-extrabold"><Counter to={1_000_000_000}/> $GARLIC</div>
            <p className="mt-3 text-sm text-white/60">Fixed, no additional mint.</p>
          </Card>
          <Card className="md:col-span-4">
            <div className="text-sm text-white/60">{t("tokenomics.taxes")}</div>
            <div className="mt-2 text-3xl font-extrabold">{t("tokenomics.taxesVal")}</div>
            <p className="mt-3 text-sm text-white/60">No trade tax.</p>
          </Card>
          <Card className="md:col-span-4">
            <div className="text-sm text-white/60">{t("tokenomics.liquidity")}</div>
            <div className="mt-2 text-3xl font-extrabold">{t("tokenomics.liquidityVal")}</div>
            <p className="mt-3 text-sm text-white/60">Pool fixed during launch period.</p>
          </Card>
          <Card className="md:col-span-6">
            <h3 className="text-lg font-semibold">{t("tokenomics.dist")}</h3>
            <ul className="mt-3 space-y-2 text-sm text-white/70">
              <li>‚Ä¢ {t("tokenomics.distList.0")}</li>
              <li>‚Ä¢ {t("tokenomics.distList.1")}</li>
              <li>‚Ä¢ {t("tokenomics.distList.2")}</li>
              <li>‚Ä¢ {t("tokenomics.distList.3")}</li>
            </ul>
          </Card>
          <Card className="md:col-span-6">
            <h3 className="text-lg font-semibold">{t("tokenomics.arch")}</h3>
            <p className="mt-3 text-sm text-white/70">{t("tokenomics.archP")}</p>
            <div className="mt-4 flex flex-wrap gap-2">
              <Pill>{t("tokenomics.pills.0")}</Pill><Pill>{t("tokenomics.pills.1")}</Pill><Pill>{t("tokenomics.pills.2")}</Pill>
            </div>
          </Card>
        </div>
      </Container>
    </section>
  );
};

/* ======================= Roadmap ======================= */
const Roadmap = () => {
  const t = useT();
  return (
    <section id="roadmap" className="relative py-20 md:py-28">
      <Container>
        <SectionTitle kicker={t("roadmap.kicker")} title={t("roadmap.title")} caption={t("roadmap.caption")}/>
        <div className="grid gap-6 md:grid-cols-3">
          {[1,2,3].map((ph) => (
            <Card key={ph}>
              <div className="mb-3 text-xs uppercase tracking-[0.2em] text-lime-300/80">Clove 0{ph}</div>
              <h3 className="text-lg font-semibold">{t("roadmap.phase")} {ph}</h3>
              <ul className="mt-3 space-y-2 text-sm text-white/70">
                {t(`roadmap.p${ph}.0`) && <li>‚Ä¢ {t(`roadmap.p${ph}.0`)}</li>}
                {t(`roadmap.p${ph}.1`) && <li>‚Ä¢ {t(`roadmap.p${ph}.1`)}</li>}
                {t(`roadmap.p${ph}.2`) && <li>‚Ä¢ {t(`roadmap.p${ph}.2`)}</li>}
              </ul>
            </Card>
          ))}
        </div>
      </Container>
    </section>
  );
};

/* ======================= How to buy ======================= */
const HowToBuy = () => {
  const t = useT();
  return (
    <section id="buy" className="relative py-20 md:py-28">
      <Container>
        <SectionTitle kicker={t("buy.kicker")} title={t("buy.title")} caption={t("buy.caption")}/>
        <div className="grid gap-6 md:grid-cols-3">
          <Card><div className="text-sm text-white/60">1</div><h3 className="mt-1 text-lg font-semibold">{t("buy.s1")}</h3><p className="mt-2 text-sm text-white/70">{t("buy.s1p")}</p></Card>
          <Card><div className="text-sm text-white/60">2</div><h3 className="mt-1 text-lg font-semibold">{t("buy.s2")}</h3><p className="mt-2 text-sm text-white/70">{t("buy.s2p")}</p></Card>
          <Card><div className="text-sm text-white/60">3</div><h3 className="mt-1 text-lg font-semibold">{t("buy.s3")}</h3><p className="mt-2 text-sm text-white/70">{t("buy.s3p")}</p></Card>
        </div>
        <div className="mt-8 flex flex-wrap items-center gap-3">
          <Btn onClick={() => document.getElementById("community")?.scrollIntoView({behavior:"smooth"})}>{t("buy.cta")} <Send className="h-4 w-4"/></Btn>
          <span className="text-xs text-white/50">{t("buy.note")}</span>
        </div>
      </Container>
    </section>
  );
};

/* ======================= Community ======================= */
const Community = () => {
  const t = useT();
  return (
    <section id="community" className="relative py-20 md:py-28">
      <Container>
        <SectionTitle kicker={t("community.kicker")} title={t("community.title")} caption={t("community.caption")}/>
        <div className="flex flex-wrap items-center gap-4">
          <a href="https://twitter.com/" target="_blank" rel="noreferrer" className="group"><Btn className="bg-white text-black hover:opacity-90"><Twitter className="h-4 w-4"/> X (Twitter)</Btn></a>
          <a href="https://t.me/" target="_blank" rel="noreferrer" className="group"><Btn><Send className="h-4 w-4"/> Telegram</Btn></a>
          <a href="/litepaper.pdf" target="_blank" rel="noreferrer" className="group">
            <span className="inline-flex items-center gap-2 rounded-full border border-white/15 px-5 py-3 text-sm text-white/80 hover:bg-white/5">
              <Shield className="h-4 w-4"/> Litepaper
            </span>
          </a>
        </div>
      </Container>
    </section>
  );
};

/* ======================= Footer ======================= */
const Footer = () => {
  const t = useT();
  return (
    <footer className="relative py-10 text-xs text-white/60">
      <Container>
        <div className="flex flex-col items-center justify-between gap-4 md:flex-row">
          <div className="flex items-center gap-2"><span className="text-lg">üßÑ</span><span>¬© {new Date().getFullYear()} Garlic. All smells reserved.</span></div>
          <div className="flex items-center gap-4">
            <a href="#" className="hover:text-white">Terms</a>
            <a href="#" className="hover:text-white">Privacy</a>
            <span className="text-white/40">{t("footer.disclaimer")}</span>
          </div>
        </div>
      </Container>
    </footer>
  );
};

/* ======================= Page ======================= */
export default function GarlicAwwwardsSite() {
  const [lang, setLangState] = useState(FALLBACK);

  // init from localStorage or browser
  useEffect(() => {
    const saved = typeof window !== "undefined" ? localStorage.getItem("lang") : null;
    if (saved && LANGS.includes(saved)) setLangState(saved);
    else {
      const b = typeof navigator !== "undefined" ? navigator.language.toLowerCase() : "";
      if (b.startsWith("hi")) setLangState("hi");
      else if (b.startsWith("id")) setLangState("id");
      else setLangState("en");
    }
  }, []);

  const setLang = (l) => {
    setLangState(l);
    try { localStorage.setItem("lang", l); } catch {}
    if (typeof document !== "undefined") document.documentElement.lang = l;
  };

  useEffect(() => {
    const onKey = (e) => { if ((e.key || "").toLowerCase() === "g") { document.getElementById("token")?.scrollIntoView({ behavior: "smooth" }); } };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, []);

  return (
    <LangContext.Provider value={{ lang, setLang }}>
      <main className="relative min-h-screen bg-[#0b0f0a] text-white selection:bg-lime-300/30 selection:text-white">
        {/* —Ñ–æ–Ω–æ–≤—ã–µ —Å–ª–æ–∏ */}
        <Noise />
        <div aria-hidden className="pointer-events-none fixed inset-0 z-0 [background:radial-gradient(circle_at_50%_-20%,rgba(190,242,100,0.15),transparent_55%),radial-gradient(circle_at_90%_10%,rgba(52,211,153,0.12),transparent_40%)]" />
        <FloatingCloves /> {/* –ø–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º */}

        {/* –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <Header />
        <Hero />
        <About />
        <Policy />
        <Partners />
        <Testimonials />
        <Tokenomics />
        <Roadmap />
        <HowToBuy />
        <Community />
        <Footer />

        <LangHint />
      </main>
    </LangContext.Provider>
  );
}

const LangHint = () => {
  const t = useT();
  return (
    <div className="fixed bottom-4 right-4 hidden rounded-full border border-white/15 bg-white/5 px-3 py-2 text-[11px] text-white/70 md:flex items-center gap-2">
      {t("footer.hint")} <Kbd>G</Kbd> {t("footer.hintAfter")}
    </div>
  );
};
